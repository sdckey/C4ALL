/*
  version 1.0.1 - fix for "division by zero" error @ "_movieLength = subAtomDuration / subAtomTimeScale;"
  version 1.0.2 - fix for improper logic at "5. Report back on the Findings" and moov atoms that FOLLOW the mdat atom
  version 2.0.0 - changed header to a simpler one, and removed the four byte wild chars at the start - put that in under BytesPrecedingHeader
*/

include "..\\Core Files\\Interfaces\\MoviePluginInterface"

class MovPlugin;

class MovDialog: DialogClass {
  CheckBoxClass   chkMOV;
  StaticTextClass txtMOV;
  LongEditClass   minMOV, maxMOV;
  StaticTextClass  txtAuthor;

  MovDialog(DialogClass parent, MovPlugin mov) :
    DialogClass    (parent, "QuickTime MOV Settings:"),
      chkMOV       (this, "Search for QuickTime MOVs", 10, 10, 100, 12, 0, mov._enabled),
      minMOV       (this, "Minimum file size (bytes: 0 - 10,000,000)", 10, 35, 100, 12, 0, mov._movMin, 0, 10000000, WindowClass::REQUIRED),
      txtMOV       (this, "50 kb = 1 second of movie (on average).  By default this script will look for movies " +
                         "5 seconds or longer.", 10, 70, 220, 50, 0),
      maxMOV       (this, "Maximum file size (bytes: 9,000 - 10,000,000,000)", 10, 95, 100, 12, 0, mov._movMax, 9000, 10000000000, WindowClass::REQUIRED),
      txtAuthor      (this, "Plugin developed by:\r\n" +
                            "\r\n" +
                            "Trevor Fairchild\r\n" +
                            "Electronic Crime Section\r\n" +
                            "Ontario Provincial Police\r\n" +
                            "C4P@e-crime.on.ca",
                                        175, 175, 100, 50, 0)
  {
  }
}


class MovPlugin: MoviePluginInterface{

  MovDialog   _dlg;

  bool        _enabled;
  bool        hasHDRL;

  double      _movieLength;

  int         _headerIndex;

  long        _movMax;
  long        _movMin;
  long        _rangeToIgnoreSearchHits;

  String      _extension;
  String      _header;
  String      _metaData;
  String      _pluginName;
  String      _version;

  MovPlugin()
  {
    _pluginName = "C4M Plugin - MOV";
    _enabled = true;
    _extension = "MOV";
    _header = "free|pnot|skip|wide|mdat|moov|junk|pict|uuid";

    _metaData = "";
    _movMin = 225000;
    _movMax = 10000000000;
    _loadSettings();

    _version = "1.0.2";
  }

  void _loadSettings(){
    StorageClass myStorage(_pluginName, 0);
    _settings(myStorage);
  }

  void _settings(StorageClass myStorage){
    myStorage.Value("movEnabled", _enabled);
    myStorage.Value("movMin", _movMin);
    myStorage.Value("movMax", _movMax);
  }


  long _validate(EntryClass e, long offset){

    _metaData = "";
    _movieLength = -1;

    // Set the CodePage
    EntryFileClass ef();

    ef.Open(e, FileClass::SLACK | FileClass::NOINITIALIZE);
    
    ef.SetCodePage(CodePageClass::ANSI);

    // point the Entry to the starting offset
    ef.Seek(offset);

    bool validAtom = true;
    long lastGood = offset;
    bool hasMdat = false;
    bool hasMoov = false;
    int atomCount;


    // ===============================================
    // == 1. Identify the Primary Atoms ==============
    // ===============================================
    while(validAtom){

      WriteDebug(_pluginName, "QuickTime Atom (offset " + ef.GetPos() + ")", false);
      WriteDebug(_pluginName, "==============", false);

      // Read in the Atom Size
      long atomSize = ef.ReadBinaryInt(4, true);

      // Read in the Atom Name
      String atomName;
      ef.ReadString(atomName, 4);

      WriteDebug(_pluginName, "  atomName : " + atomName, false);
      WriteDebug(_pluginName, "  atomSize : " + atomSize, false);



      // ===============================================
      // == 2. Examin the Atom's Size and Name =========
      // ===============================================
      if(ef.GetPos() + atomSize - 8 > _movMax){
        // this atom is no good
        WriteDebug(_pluginName, "  XX INVALID ATOM XX - atomSize would exceed the _movMax (" + _movMax + ")", false);
        validAtom = false;
      }

      if(atomSize < 8){
        // this atom is no good
        WriteDebug(_pluginName, "       XX INVALID SUB ATOM XX - subAtomSize is less than the minimum (" + atomSize + ")", false);
        validAtom = false;
      }

      if(atomName == ""){
        // this atom is no good
        WriteDebug(_pluginName, "  XX INVALID ATOM XX - atomName is empty", false);
        validAtom = false;
      }

      if(IsValidAtomName(atomName) == false){
        // this atom is no good
        WriteDebug(_pluginName, "  XX INVALID ATOM XX - atomName is invalid (" + atomName + ")", false);
        validAtom = false;
      }


      // ===============================================
      // == 3. Examin Each Primary Atom ================
      // ===============================================
      if(validAtom){
        if(atomName == "free"){
          // do nothing - skip the atom
          WriteDebug(_pluginName, "  == Nothing to examine", false);
        }
        else if(atomName == "ftyp"){

        }
        else if(atomName == "junk"){

        }
        else if(atomName == "mdat"){
          // actual movie data.
          hasMdat = true;
        }
        else if(atomName == "moov"){
          long lastPos = ef.GetPos();
          if(CheckMoov(ef, ef.GetPos(), atomSize) == false){
            WriteDebug(_pluginName, "  XX INVALID ATOM XX - CheckMoov failed", false);
            validAtom = false;
          } else
            hasMoov = true;

          ef.Seek(lastPos);
        }
        else if(atomName == "pict"){

        }
        else if(atomName == "pnot"){

        }
        else if(atomName == "skip"){
          // do nothing - skip the atom
          WriteDebug(_pluginName, "  == Nothing to examine", false);
        }
        else if(atomName == "uuid"){

        }
        else if(atomName == "wide"){
          // do nothing - reserved space
          WriteDebug(_pluginName, "  == Nothing to examine", false);
        }

      }


      // ===============================================
      // == 4. Move to next Possible Atom ==============
      // ===============================================
      if(validAtom){

        // Update the 'lastGood' position and
        // skip to the next atom.   Note that the atomSize includes the atomSize and atomName
        ef.Skip(atomSize - 8);
        lastGood = ef.GetPos() - 1;
        atomCount++;
      }
    }


    // ===============================================
    // == 5. Report back on the Findings =============
    // ===============================================
    long movieLength;
    ef.Seek(lastGood);

    // impose a 2 atom count
    if(atomCount<2){
      movieLength = 0;
      WriteDebug(_pluginName, "  XX INVALID MOVIE XX - only had one atom", false);
    }
    // if there is an mdat, there has to be a moov
    else if(hasMdat == true && hasMoov == false){
      movieLength = 0;
      WriteDebug(_pluginName, "  XX INVALID MOVIE XX - mdat present, but moov (which is required to play the mdat) is not.)", false);
    }
    // if there isn't an mdat, there at least needs to be a moov atom
    else if(!hasMoov){
      movieLength = 0;
      WriteDebug(_pluginName, "  XX INVALID MOVIE XX - did not have an mdat or moov atom", false);
    }
    // if lastGood is the same as the starting offset, then there weren't any valid atoms
    else if(lastGood == offset){
      movieLength = 0;
    }
    // otherwise, it's a good movie
    else
      movieLength = lastGood - offset;

    WriteDebug(_pluginName, "QuickTime Movie Findings", false);
    WriteDebug(_pluginName, "========================", false);
    WriteDebug(_pluginName, "Last Good Atom:  " + lastGood, false);
    WriteDebug(_pluginName, "Starting Offset: " + offset, false);
    WriteDebug(_pluginName, "Movie Length:    " + movieLength, false);


    if(movieLength != 0){
      // to deal with partially downloaded movies, if the offset is 0 and the file is good, then
      //  just take the logical size
      if(offset == 0 &! e.IsUnallocated()){
        WriteDebug(_pluginName, "WMV validated (size = " + movieLength + ").  Given the search hit was at offset 0, using the entry's Logical Size instead (" + e.LogicalSize() + ")", false);
        movieLength = e.LogicalSize();
      }
    }

    if(movieLength > _movMax){
      WriteDebug(_pluginName, "WMV validated, but size (" + movieLength + ") exceeds format's maximum (" + _movMax + ")", false);
      movieLength = _movMax;
    }

    if(movieLength < _movMin){
      WriteDebug(_pluginName, "WMV validated, but size (" + movieLength + ") is under the format's minimum (" + _movMin + ")", false);
      movieLength = 0;
    }

    _rangeToIgnoreSearchHits = movieLength;
    return movieLength;
  }

  bool IsValidAtomName(const String &val){
    // an atom name (so far) can only contain letters, ucase and lcase
    for(int i = 0; i<val.GetLength();i++){
      String s = val.SubString(i,1);

      if( (s >= "A" && s <= "Z") || ( s >="a" && s <="z") ){
      } else
        return false;
    }

    return true;
  }





  // =============================================================
  // === m o o v   A t o m =======================================
  // =============================================================
  //
  // "These atoms act as a container for the information that describes a movie's data"
  bool CheckMoov(EntryFileClass ef, long offset, long atomSize){
    // point the Entry to the starting offset
    ef.Seek(offset);

    WriteDebug(_pluginName, "  == moov atom examination (offset " + offset + ")", false);

    bool validAtom = true;

    // == a. Identify the Sub Atoms ==================
    // ===============================================
    while(validAtom){
      WriteDebug(_pluginName, "       moov Sub Atom (offset " + ef.GetPos() + ")", false);
      WriteDebug(_pluginName, "       ================================", false);

      // Read in the Atom Size
      long subAtomSize = ef.ReadBinaryInt(4, true);

      // Read in the Atom Name
      String subAtomName;
      ef.ReadString(subAtomName, 4);

      WriteDebug(_pluginName, "       atomName : " + subAtomName, false);
      WriteDebug(_pluginName, "       atomSize : " + subAtomSize, false);

      // == b. Examine the Atom's Size ==================
      // ===============================================
      if(ef.GetPos() == atomSize + offset){
        // exit the loop = we're at the logical conclusion of the atom
        WriteDebug(_pluginName, "       ++ Atom Concluded as expected", false);
        validAtom = false;
      }

      if(ef.GetPos() + subAtomSize - 8 > atomSize + offset - 8){
        // this atom is no good
        WriteDebug(_pluginName, "       XX INVALID SUB ATOM XX - subAtomSize would exceed the atomSize (" + atomSize + ")", false);
        WriteDebug(_pluginName, ef.GetPos(), false);
        WriteDebug(_pluginName, subAtomSize, false);
        WriteDebug(_pluginName, atomSize, false);
        WriteDebug(_pluginName, offset, false);

        // validAtom = false;
        return false;
      }
      if(subAtomSize < 8){
        // this atom is no good
        WriteDebug(_pluginName, "       XX INVALID SUB ATOM XX - subAtomSize is less than the minimum (" + subAtomSize + ")", false);

        // doesn't mean the entire MOOV atom is bad, just this last sub-atom...
        validAtom = false;
        //return false;
      }
      if(IsValidAtomName(subAtomName) == false){
        // this atom is no good
        WriteDebug(_pluginName, "  XX INVALID ATOM XX - subAtomName is invalid (" + subAtomName + ")", false);
        //validAtom = false;
        return false;
      }

      // == c. Examine Each Sub Atom ====================
      // ===============================================
      if(validAtom){

        // == mvhd ====================
        if(subAtomName == "mvhd"){

          // preserve the offset
          long subOffset = ef.GetPos();

          // NOTE:  mvhd MUST be 108 bytes long
          if(subAtomSize != 108){
            WriteDebug(_pluginName, "       XX INVALID ATOM XX - mvhd length (" + subAtomSize + ") invalid.  Must be 108", false);
            //validAtom = false;
            return false;
          }

          if(validAtom){
            int  subAtomVersion    = ef.ReadBinaryInt(1);
            int  subAtomFlags      = ef.ReadBinaryInt(3, true);
            long subAtomCreation   = ef.ReadBinaryInt(4, true);
            long subAtomModified   = ef.ReadBinaryInt(4, true);
            long subAtomTimeScale  = ef.ReadBinaryInt(4, true);
            long subAtomDuration   = ef.ReadBinaryInt(4, true);
            long subAtomPreferred  = ef.ReadBinaryInt(4, true);
            long subAtomVolume     = ef.ReadBinaryInt(2, true);
            //long subAtomReserved   = ef.ReadBinaryInt(10, true);
            ef.Skip(10);
            //long subAtomMatrix     = ef.ReadBinaryInt(36, true);
            ef.Skip(36);
            long subAtomPreviewPos  = ef.ReadBinaryInt(4, true);
            long subAtomPreviewLen  = ef.ReadBinaryInt(4, true);
            long subAtomPosterPos   = ef.ReadBinaryInt(4, true);
            long subAtomSelTime     = ef.ReadBinaryInt(4, true);
            long subAtomSelLen      = ef.ReadBinaryInt(4, true);
            long subAtomCurTime     = ef.ReadBinaryInt(4, true);
            long subAtomNextTrackID = ef.ReadBinaryInt(4, true);

            WriteDebug(_pluginName, "       == Version:        " + subAtomVersion, false);
            WriteDebug(_pluginName, "       == Flags:          " + subAtomFlags , false);
            WriteDebug(_pluginName, "       == Creation:       " + subAtomCreation, false);
            WriteDebug(_pluginName, "       == Modified:       " + subAtomModified , false);
            WriteDebug(_pluginName, "       == Time Scale:     " + subAtomTimeScale , false);
            WriteDebug(_pluginName, "       == Duration:       " + subAtomDuration , false);
            WriteDebug(_pluginName, "       == Preferred:      " + subAtomPreferred , false);
            WriteDebug(_pluginName, "       == Volume:         " + subAtomVolume , false);
            WriteDebug(_pluginName, "       == Preview Pos:    " + subAtomPreviewPos , false);
            WriteDebug(_pluginName, "       == Preview Len:    " + subAtomPreviewLen, false);
            WriteDebug(_pluginName, "       == Poster Pos:     " + subAtomPosterPos , false);
            WriteDebug(_pluginName, "       == Selection Time: " + subAtomSelTime , false);
            WriteDebug(_pluginName, "       == Selection Len:  " + subAtomSelLen , false);
            WriteDebug(_pluginName, "       == Current Time:   " + subAtomCurTime , false);
            WriteDebug(_pluginName, "       == Next Track Id:  " + subAtomNextTrackID, false);

            if(subAtomTimeScale > 0)
              _movieLength = subAtomDuration / subAtomTimeScale;
            else
              _movieLength = -1;

            // Validating criteria
            if(subAtomNextTrackID == 0){
              WriteDebug(_pluginName, "       XX INVALID SUB ATOM XX - subAtomNextTrackID cannot be zero", false);

              // not just an invalid atom but the whole file needs to be stopped
              //validAtom = false;
              return false;
            }

            // reset the pointer
            ef.Seek(subOffset);
          }
        }
        // == trak ====================
        else if (subAtomName == "trak"){
          // preserve the offset
          long subOffset = ef.GetPos();

          // This is a big pile of puke - each element has a huge file structure, but no
          // discernable rules or constraints I could use to validate
          //
          // Known elements:
          // ===============
          // tkhd - must be 92 bytes
          // clip
          // matt
          // edts
          // tref
          // load
          // imap
          // mdia
          // udta
          WriteDebug(_pluginName, "       == Not examined", false);

          // reset the pointer
          ef.Seek(subOffset);
        }
      }


      // == d. Move to next Possible Sub Atom ==========
      // ===============================================
      if(validAtom){

        // Skip to the next atom.   Note that the atomSize includes the atomSize and atomName
        ef.Skip(subAtomSize - 8);

        if(ef.GetPos() == atomSize) return true;
      }
    }

    return true;
  }




  // ==============================================
  // Interface methods
  virtual String Version(){
    return _version;
  }
  virtual MemoryFileClass GetMemoryFileClass(){
    return null;
  }
  virtual bool Enabled(){
    return _enabled;
  }
  virtual void SetEnabled(const bool &val){
    _enabled = val;
  }
  virtual String Extension(){
    return _extension;
  }
  virtual void SetExtension(const String &val){
    _extension = val;
  }
  virtual String Header(){
    return _header;
  }
  virtual void SetHeader(const String &val){
    _header = val;
  }
  virtual String MetaData(){
    return _metaData;
  }
  virtual DialogClass GetDialog(DialogClass parent){
    _dlg = new MovDialog(parent, this);
    return _dlg;
  }
  virtual long Validate(EntryClass e, long offset){
    offset -= BytesPrecedingHeader();
    if(offset < 0){
      WriteDebug(_pluginName, "Search hit - BytesPrecedingHeader puts the target offset before the start of the file.  Search Hit is invalid.", false);
      return -1;
    }
    else
      return _validate(e, offset);
  }

  virtual int HeaderIndex(){
    return _headerIndex;
  }
  virtual void SetHeaderIndex(int val){
    _headerIndex = val;
  }
  virtual void SaveSettings(){
    StorageClass myStorage(_pluginName, StorageClass::WRITE);
    _settings(myStorage);
  }
  virtual String PluginName(){
    return _pluginName;
  }
  virtual void SetPluginName(const String &val){
    _pluginName = val;
  }
  virtual double MovieLength(){
    return _movieLength;
  }
  virtual long BytesPrecedingHeader(){
    return 4;
  }
  virtual long RangeToIgnoreSearchHits(){
    return _rangeToIgnoreSearchHits;
  }
  virtual long SmallFileLimit(){
    return 102400;  // 100kb
  }
  // ==============================================
}
